[Function:(a1 : String, b1 : String) -> Void]
	[Arg:String] [Local a1(124426):String]
	[Arg:String] [Local b1(124427):String]
	[Block:String]
		[Call:Void]
			[Field:(v : Dynamic, ?infos : Null<haxe.PosInfos>) -> Void]
				[TypeExpr haxe.Log:Class<haxe.Log>]
				[FStatic:(v : Dynamic, ?infos : Null<haxe.PosInfos>) -> Void]
					haxe.Log
					trace:(v : Dynamic, ?infos : Null<haxe.PosInfos>) -> Void
			[Const:String] "create Ereg:"
			[ObjectDecl:{ methodName : String, lineNumber : Int, fileName : String, customParams : Array<Dynamic>, className : String }]
				fileName: [Const:String] "ocaml_api/Ereg.hx"
				lineNumber: [Const:Int] 13
				className: [Const:String] "Ereg"
				methodName: [Const:String] "new"
				customParams: [ArrayDecl:Array<Dynamic>]
					[Local a1(124426):String:String]
					[Const:String] ","
					[Local b1(124427):String:String]
		[Binop:ocaml.Str_Regexp]
			[Field:ocaml.Str_Regexp]
				[Const:Ereg] this
				[FInstance:ocaml.Str_Regexp]
					Ereg
					ocamlEreg:ocaml.Str_Regexp
			=
			[Call:ocaml.Str_Regexp]
				[Field:(a0 : String) -> ocaml.Str_Regexp]
					[TypeExpr ocaml.Str:Class<ocaml.Str>]
					[FStatic:(a0 : String) -> ocaml.Str_Regexp]
						ocaml.Str
						regexp:(a0 : String) -> ocaml.Str_Regexp
				[Local a1(124426):String:String]
		[Binop:String]
			[Field:String]
				[Const:Ereg] this
				[FInstance:String]
					Ereg
					mode:String
			=
			[Local b1(124427):String:String][Function:(s : String, by : String) -> String]
	[Arg:String] [Local s(124428):String]
	[Arg:String] [Local by(124429):String]
	[Block:Dynamic]
		[If:Void]
			[Parenthesis:Bool]
				[Binop:Bool]
					[Field:String]
						[Const:Ereg] this
						[FInstance:String]
							Ereg
							mode:String
					==
					[Const:String] "g"
			[Then:Dynamic] [Block:Dynamic]
				[Var data(124430):String]
					[Call:String]
						[Field:(a0 : ocaml.Str_Regexp, a1 : String, a2 : String) -> String]
							[TypeExpr ocaml.Str:Class<ocaml.Str>]
							[FStatic:(a0 : ocaml.Str_Regexp, a1 : String, a2 : String) -> String]
								ocaml.Str
								global_replace:(a0 : ocaml.Str_Regexp, a1 : String, a2 : String) -> String
						[Field:ocaml.Str_Regexp]
							[Const:Ereg] this
							[FInstance:ocaml.Str_Regexp]
								Ereg
								ocamlEreg:ocaml.Str_Regexp
						[Local by(124429):String:String]
						[Local s(124428):String:String]
				[Return:Dynamic] [Local data(124430):String:String]
		[Return:Dynamic]
			[Call:String]
				[Field:(a0 : ocaml.Str_Regexp, a1 : String, a2 : String) -> String]
					[TypeExpr ocaml.Str:Class<ocaml.Str>]
					[FStatic:(a0 : ocaml.Str_Regexp, a1 : String, a2 : String) -> String]
						ocaml.Str
						replace_first:(a0 : ocaml.Str_Regexp, a1 : String, a2 : String) -> String
				[Field:ocaml.Str_Regexp]
					[Const:Ereg] this
					[FInstance:ocaml.Str_Regexp]
						Ereg
						ocamlEreg:ocaml.Str_Regexp
				[Local by(124429):String:String]
				[Local s(124428):String:String][Function:(s : String, cb : (Ereg -> String)) -> Void]
	[Arg:String] [Local s(124431):String]
	[Arg:Ereg -> String] [Local cb(124432):Ereg -> String]
	[Block:String]
		[Call:String]
			[Local cb(124432):Ereg -> String:Ereg -> String]
			[Const:Ereg] this[Function:(index : Int) -> String]
	[Arg:Int] [Local index(124433):Int]
	[Block:Dynamic] [Return:Dynamic] [Const:String] ""